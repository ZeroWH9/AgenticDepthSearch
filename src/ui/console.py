"""
Console interface module using Rich
"""
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.text import Text
from typing import Dict, Any, List
import json # Import json to format dictionary (if needed)

console = Console()

def display_welcome():
    """Display welcome message"""
    console.print(Panel.fit(
        "Deep Research Local",
        title="Welcome",
        border_style="blue"
    ))

def get_user_query() -> str:
    """
    Get user query
    
    Returns:
        str: Input query
    """
    return Prompt.ask("\nYour search")

def get_search_params() -> Dict[str, int]:
    """
    Get search parameters
    
    Returns:
        Dict[str, int]: Configured parameters
    """
    console.print(Panel.fit(
        "[bold]Depth[/bold] (1-5):\n"
        "1: Basic and superficial search\n"
        "3: Moderate search (recommended)\n"
        "5: Deep and detailed search\n"
        "\n"
        "[bold]Breadth[/bold] (1-3):\n"
        "1: One focused sub-query\n"
        "2: Two different sub-queries\n"
        "3: Three sub-queries for better coverage",
        title="Search Parameters",
        border_style="blue"
    ))
    
    depth = Prompt.ask(
        "\nDepth [1/2/3/4/5]",
        default="3",
        choices=["1", "2", "3", "4", "5"]
    )
    breadth = Prompt.ask(
        "Breadth [1/2/3]",
        default="2",
        choices=["1", "2", "3"]
    )
    
    return {
        "depth": int(depth),
        "breadth": int(breadth)
    }

def display_results(results: Dict[str, Any]):
    """
    Display formatted results
    
    Args:
        results: Search results
    """
    # Sub-queries table
    table = Table(title="Generated Sub-queries")
    table.add_column("Query", style="cyan")
    for query in results.get("sub_queries", []):
        table.add_row(query)
    console.print(table)
    
    # Results table
    table = Table(title="Results")
    table.add_column("Title", style="cyan")
    table.add_column("URL", style="blue")
    table.add_column("Score", style="green")
    
    for result in results.get("results", []):
        table.add_row(
            result.get("title", "No title"),
            result.get("url", "No URL"),
            f"{result.get('score', 0):.2f}"
        )
    console.print(table)
    
    # Results analysis - Modified to display the narrative analysis string
    analysis_content = results.get("analysis") # Should now be a string

    if analysis_content and isinstance(analysis_content, str):
        if analysis_content.startswith("Error generating narrative analysis"):
            # Display analysis error in red
            console.print(Panel.fit(
                Text(analysis_content, style="red"),
                title="Analysis Error",
                border_style="red"
            ))
        else:
            # Display the narrative summary/analysis in natural language
            console.print(Panel.fit(
                Text(analysis_content),
                title="Analysis", # Panel title
                border_style="blue"
            ))
    else:
        # Case where 'analysis' is not present or is not a string
        console.print(Panel.fit(
            f"Narrative analysis data is unavailable or in unexpected format: {type(analysis_content)}",
            title="Analysis",
            border_style="yellow"
        ))

    # Final Answer (Displays the final summary generated by FINAL_SUMMARY_PROMPT)
    summary_content = results.get("summary")
    if summary_content and isinstance(summary_content, str):
        if summary_content.startswith("Error") or summary_content.startswith("Summary generation skipped"):
             console.print(Panel.fit(
                Text(summary_content, style="red"),
                title="Final Answer Generation Error",
                border_style="red"
            ))
        else:
            console.print(Panel.fit(
                Text(summary_content),
                title="Final Answer",
                border_style="green"
            ))
    else:
        console.print(Panel.fit(
            "Final summary could not be generated or is unavailable.",
            title="Final Answer",
            border_style="red"
        ))

def ask_continue() -> bool:
    """
    Ask if user wants to continue
    
    Returns:
        bool: True if wants to continue
    """
    return Prompt.ask("\nWould you like to do another search?", choices=["y", "n"]) == "y"

def display_progress(message: str):
    """
    Display progress bar
    
    Args:
        message: Message to display
        
    Returns:
        Progress: Progress object
    """
    progress = Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        transient=True
    )
    progress.add_task(description=message, total=None)
    return progress 